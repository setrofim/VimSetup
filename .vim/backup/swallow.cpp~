#include <iostream>

class Bird {
public:
    Bird(int asv) : base_asv(asv) {};
    Bird& operator=(const Bird& rhs) { base_asv = rhs.base_asv; return *this; };
    virtual int asv() {return base_asv;};
protected:
    int base_asv;
};

class Swallow : public Bird {
public:
    Swallow(int asv, bool isl) : Bird(asv), is_laden(isl) {};
    Swallow& operator=(const Swallow& rhs) { base_asv = rhs.base_asv; return *this; };
    virtual int asv() {
	if (is_laden)
	    return base_asv / 2;
	return base_asv;
    }
    bool is_laden;
};

int main() {
    Bird * unladen_swallow = new Swallow(10, false);
    Bird * laden_swallow = new Swallow(15, true);

    *unladen_swallow = *laden_swallow;

    std::cout << "Airspeed velocity  is " << unladen_swallow->asv() << std::endl;

    delete unladen_swallow;
    delete laden_swallow;
    return 0;
}
